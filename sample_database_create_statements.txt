CREATE TABLE IF NOT EXISTS Students (
    student_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    date_of_birth DATE,
    address VARCHAR(100),
    email VARCHAR(100),
    phone_number VARCHAR(20)
);
CREATE TABLE IF NOT EXISTS Departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(100),
    head_instructor_id INT
);

CREATE TABLE IF NOT EXISTS Instructors (
    instructor_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    phone_number VARCHAR(20),
    department_id INT,
    FOREIGN KEY (department_id) REFERENCES Departments(department_id)
);
CREATE TABLE IF NOT EXISTS Courses (
    course_id INT PRIMARY KEY,
    course_name VARCHAR(100),
    department_id INT,
    credits INT,
    instructor_id INT,
    FOREIGN KEY (department_id) REFERENCES Departments(department_id),
    FOREIGN KEY (instructor_id) REFERENCES Instructors(instructor_id)
);


CREATE TABLE IF NOT EXISTS Enrollments (
    enrollment_id INT PRIMARY KEY,
    student_id INT,
    course_id INT,
    enrollment_date DATE,
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);
CREATE TABLE IF NOT EXISTS Classes (
    class_id INT PRIMARY KEY,
    course_id INT,
    instructor_id INT,
    room_number VARCHAR(20),
    schedule VARCHAR(100),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id),
    FOREIGN KEY (instructor_id) REFERENCES Instructors(instructor_id)
);
CREATE TABLE IF NOT EXISTS Assignments (
    assignment_id INT PRIMARY KEY,
    class_id INT,
    assignment_name VARCHAR(100),
    due_date DATE,
    FOREIGN KEY (class_id) REFERENCES Classes(class_id)
);
CREATE TABLE IF NOT EXISTS Grades (
    grade_id INT PRIMARY KEY,
    enrollment_id INT,
    assignment_id INT,
    score DECIMAL(5, 2),
    FOREIGN KEY (enrollment_id) REFERENCES Enrollments(enrollment_id),
    FOREIGN KEY (assignment_id) REFERENCES Assignments(assignment_id)
);
CREATE TABLE IF NOT EXISTS Attendance (
    attendance_id INT PRIMARY KEY,
    class_id INT,
    student_id INT,
    date DATE,
    status VARCHAR(10),
    FOREIGN KEY (class_id) REFERENCES Classes(class_id),
    FOREIGN KEY (student_id) REFERENCES Students(student_id)
);
CREATE TABLE IF NOT EXISTS Resources (
    resource_id INT PRIMARY KEY,
    resource_name VARCHAR(100),
    description TEXT,
    location VARCHAR(100),
    availability BOOLEAN
);



CREATE TABLE IF NOT EXISTS Students (
    student_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    date_of_birth DATE,
    address VARCHAR(100),
    email VARCHAR(100),
    phone_number VARCHAR(20)
);
CREATE TABLE IF NOT EXISTS Departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(100),
    head_instructor_id INT
);

CREATE TABLE IF NOT EXISTS Instructors (
    instructor_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    phone_number VARCHAR(20),
    department_id INT,
    FOREIGN KEY (department_id) REFERENCES Departments(department_id)
);
CREATE TABLE IF NOT EXISTS Courses (
    course_id INT PRIMARY KEY,
    course_name VARCHAR(100),
    department_id INT,
    credits INT,
    instructor_id INT,
    FOREIGN KEY (department_id) REFERENCES Departments(department_id),
    FOREIGN KEY (instructor_id) REFERENCES Instructors(instructor_id)
);


CREATE TABLE IF NOT EXISTS Enrollments (
    enrollment_id INT PRIMARY KEY,
    student_id INT,
    course_id INT,
    enrollment_date DATE,
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);
CREATE TABLE IF NOT EXISTS Classes (
    class_id INT PRIMARY KEY,
    course_id INT,
    instructor_id INT,
    room_number VARCHAR(20),
    schedule VARCHAR(100),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id),
    FOREIGN KEY (instructor_id) REFERENCES Instructors(instructor_id)
);
CREATE TABLE IF NOT EXISTS Assignments (
    assignment_id INT PRIMARY KEY,
    class_id INT,
    assignment_name VARCHAR(100),
    due_date DATE,
    FOREIGN KEY (class_id) REFERENCES Classes(class_id)
);
CREATE TABLE IF NOT EXISTS Grades (
    grade_id INT PRIMARY KEY,
    enrollment_id INT,
    assignment_id INT,
    score DECIMAL(5, 2),
    FOREIGN KEY (enrollment_id) REFERENCES Enrollments(enrollment_id),
    FOREIGN KEY (assignment_id) REFERENCES Assignments(assignment_id)
);
CREATE TABLE IF NOT EXISTS Attendance (
    attendance_id INT PRIMARY KEY,
    class_id INT,
    student_id INT,
    date DATE,
    status VARCHAR(10),
    FOREIGN KEY (class_id) REFERENCES Classes(class_id),
    FOREIGN KEY (student_id) REFERENCES Students(student_id)
);
CREATE TABLE IF NOT EXISTS Resources (
    resource_id INT PRIMARY KEY,
    resource_name VARCHAR(100),
    description TEXT,
    location VARCHAR(100),
    availability BOOLEAN
);


CREATE TABLE IF NOT EXISTS Books (
    book_id INT PRIMARY KEY,
    title VARCHAR(255),
    author VARCHAR(255),
    isbn VARCHAR(20),
    publication_date DATE,
    genre VARCHAR(100),
    available BOOLEAN
);

CREATE TABLE IF NOT EXISTS Authors (
    author_id INT PRIMARY KEY,
    author_name VARCHAR(255),
    nationality VARCHAR(100),
    birth_date DATE,
    death_date DATE
);

CREATE TABLE IF NOT EXISTS Book_Copies (
    copy_id INT PRIMARY KEY,
    book_id INT,
    location VARCHAR(100),
    status VARCHAR(20),
    FOREIGN KEY (book_id) REFERENCES Books(book_id)
);

CREATE TABLE IF NOT EXISTS LibraryMembers (
    member_id INT PRIMARY KEY,
    student_id INT,
    join_date DATE,
    FOREIGN KEY (student_id) REFERENCES Students(student_id)
);

CREATE TABLE IF NOT EXISTS Borrowed_Books (
    borrow_id INT PRIMARY KEY,
    member_id INT,
    copy_id INT,
    borrow_date DATE,
    return_date DATE,
    status VARCHAR(20),
    FOREIGN KEY (member_id) REFERENCES LibraryMembers(member_id),
    FOREIGN KEY (copy_id) REFERENCES Book_Copies(copy_id)
);
CREATE TABLE IF NOT EXISTS LibraryReservations (
    reservation_id INT PRIMARY KEY,
    member_id INT,
    book_id INT,
    reservation_date DATE,
    status VARCHAR(20),
    FOREIGN KEY (member_id) REFERENCES LibraryMembers(member_id),
    FOREIGN KEY (book_id) REFERENCES Books(book_id)
);

CREATE TABLE IF NOT EXISTS Fines (
    fine_id INT PRIMARY KEY,
    member_id INT,
    amount DECIMAL(10, 2),
    reason VARCHAR(255),
    paid BOOLEAN,
    FOREIGN KEY (member_id) REFERENCES LibraryMembers(member_id)
);

CREATE TABLE IF NOT EXISTS Genres (
    genre_id INT PRIMARY KEY,
    genre_name VARCHAR(100)
);

CREATE TABLE IF NOT EXISTS Book_Genres (
    book_id INT,
    genre_id INT,
    PRIMARY KEY (book_id, genre_id),
    FOREIGN KEY (book_id) REFERENCES Books(book_id),
    FOREIGN KEY (genre_id) REFERENCES Genres(genre_id)
);

CREATE TABLE IF NOT EXISTS Publishers (
    publisher_id INT PRIMARY KEY,
    publisher_name VARCHAR(255),
    country VARCHAR(100)
);

CREATE TABLE IF NOT EXISTS Book_Publishers (
    book_id INT,
    publisher_id INT,
    PRIMARY KEY (book_id, publisher_id),
    FOREIGN KEY (book_id) REFERENCES Books(book_id),
    FOREIGN KEY (publisher_id) REFERENCES Publishers(publisher_id)
);

CREATE TABLE IF NOT EXISTS Book_Authors (
    book_id INT,
    author_id INT,
    PRIMARY KEY (book_id, author_id),
    FOREIGN KEY (book_id) REFERENCES Books(book_id),
    FOREIGN KEY (author_id) REFERENCES Authors(author_id)
);

CREATE TABLE IF NOT EXISTS Sections (
    section_id INT PRIMARY KEY,
    section_name VARCHAR(100),
    location VARCHAR(100)
);

CREATE TABLE IF NOT EXISTS Book_Sections (
    book_id INT,
    section_id INT,
    PRIMARY KEY (book_id, section_id),
    FOREIGN KEY (book_id) REFERENCES Books(book_id),
    FOREIGN KEY (section_id) REFERENCES Sections(section_id)
);

CREATE TABLE IF NOT EXISTS Reviews (
    review_id INT PRIMARY KEY,
    book_id INT,
    member_id INT,
    rating INT,
    review_text TEXT,
    review_date DATE,
    FOREIGN KEY (book_id) REFERENCES Books(book_id),
    FOREIGN KEY (member_id) REFERENCES LibraryMembers(member_id)
);

CREATE TABLE IF NOT EXISTS Bookmarks (
    bookmark_id INT PRIMARY KEY,
    member_id INT,
    book_id INT,
    page_number INT,
    bookmark_date DATE,
    FOREIGN KEY (member_id) REFERENCES LibraryMembers(member_id),
    FOREIGN KEY (book_id) REFERENCES Books(book_id)
);

CREATE TABLE IF NOT EXISTS Authors_History (
    author_id INT PRIMARY KEY,
    author_name VARCHAR(255),
    nationality VARCHAR(100),
    birth_date DATE,
    death_date DATE
);

CREATE TABLE IF NOT EXISTS Book_Authors_History (
    book_id INT,
    author_id INT,
    PRIMARY KEY (book_id, author_id),
    FOREIGN KEY (book_id) REFERENCES Books(book_id),
    FOREIGN KEY (author_id) REFERENCES Authors_History(author_id)
);

CREATE TABLE IF NOT EXISTS Sections_History (
    section_id INT PRIMARY KEY,
    section_name VARCHAR(100),
    location VARCHAR(100)
);

CREATE TABLE IF NOT EXISTS Book_Sections_History (
    book_id INT,
    section_id INT,
    PRIMARY KEY (book_id, section_id),
    FOREIGN KEY (book_id) REFERENCES Books(book_id),
    FOREIGN KEY (section_id) REFERENCES Sections_History(section_id)
);